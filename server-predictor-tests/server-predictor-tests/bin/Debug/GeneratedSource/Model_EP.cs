using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Maths;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference
	/// </summary>
	/// <remarks>
	/// The easiest way to use this class is to wrap an instance in a CompiledAlgorithm object and use
	/// the methods on CompiledAlgorithm to set parameters and execute inference.
	/// 
	/// If you instead wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class
	/// 2) Set the value of any externally-set fields e.g. data, priors
	/// 3) Call the Execute(numberOfIterations) method
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.5 at 09:58 on 17 maja 2013.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>Message to marginal of 'vint2'</summary>
		public Discrete vint2_marginal_F;
		/// <summary>Message to marginal of 'vint4'</summary>
		public Discrete vint4_marginal_F;
		/// <summary>Message to marginal of 'vint5'</summary>
		public Discrete vint5_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{			get {
				return this.numberOfIterationsDone;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>The marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object Marginal(string variableName)
		{
			if (variableName=="vint2") {
				return this.Vint2Marginal();
			}
			if (variableName=="vint4") {
				return this.Vint4Marginal();
			}
			if (variableName=="vint5") {
				return this.Vint5Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>The query-specific marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.numberOfIterationsDone = numberOfIterations;
		}

		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		public void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			// The constant 'vDiscrete0'
			Discrete vDiscrete0 = new Discrete(DenseVector.FromArray(new double[4] {0.4,0.4,0.1,0.1}));
			this.vint2_marginal_F = ArrayHelper.MakeUniform<Discrete>(vDiscrete0);
			Discrete[] vint2_selector_uses_B = default(Discrete[]);
			// Create array for 'vint2_selector_uses' Backwards messages.
			vint2_selector_uses_B = new Discrete[3];
			for(int _ind = 0; _ind<3; _ind++) {
				vint2_selector_uses_B[_ind] = ArrayHelper.MakeUniform<Discrete>(vDiscrete0);
			}
			Bernoulli[] vint2_selector_cases_0_uses_B = default(Bernoulli[]);
			// Create array for 'vint2_selector_cases_0_uses' Backwards messages.
			vint2_selector_cases_0_uses_B = new Bernoulli[6];
			for(int _ind = 0; _ind<6; _ind++) {
				vint2_selector_cases_0_uses_B[_ind] = Bernoulli.Uniform();
			}
			// The constant 'vDiscrete2'
			Discrete vDiscrete2 = Discrete.Uniform(2, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Dense, 0.0, 0));
			// Message to 'vint2_selector_cases_0_uses' from Equal factor
			vint2_selector_cases_0_uses_B[2] = Bernoulli.FromLogOdds(ConstrainEqualOp<int>.LogEvidenceRatio<Discrete>(vDiscrete2, 0));
			// Message to 'vint2_selector_cases_0_uses' from Equal factor
			vint2_selector_cases_0_uses_B[5] = Bernoulli.FromLogOdds(ConstrainEqualOp<int>.LogEvidenceRatio<Discrete>(vDiscrete2, 0));
			Bernoulli vint2_selector_cases_0_B = Bernoulli.Uniform();
			// Message to 'vint2_selector_cases_0' from Replicate factor
			vint2_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vint2_selector_cases_0_uses_B, vint2_selector_cases_0_B);
			DistributionStructArray<Bernoulli,bool> vint2_selector_cases_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'vint2_selector_cases' Backwards messages.
			vint2_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(vDiscrete0.Dimension);
			for(int _ind0 = 0; _ind0<vDiscrete0.Dimension; _ind0++) {
				vint2_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			// Message to 'vint2_selector_cases' from Copy factor
			vint2_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(vint2_selector_cases_B[0], vint2_selector_cases_0_B);
			Bernoulli[] vint2_selector_cases_1_uses_B = default(Bernoulli[]);
			// Create array for 'vint2_selector_cases_1_uses' Backwards messages.
			vint2_selector_cases_1_uses_B = new Bernoulli[6];
			for(int _ind = 0; _ind<6; _ind++) {
				vint2_selector_cases_1_uses_B[_ind] = Bernoulli.Uniform();
			}
			// Message to 'vint2_selector_cases_1_uses' from Equal factor
			vint2_selector_cases_1_uses_B[2] = Bernoulli.FromLogOdds(ConstrainEqualOp<int>.LogEvidenceRatio<Discrete>(vDiscrete2, 0));
			// Message to 'vint2_selector_cases_1_uses' from Equal factor
			vint2_selector_cases_1_uses_B[5] = Bernoulli.FromLogOdds(ConstrainEqualOp<int>.LogEvidenceRatio<Discrete>(vDiscrete2, 1));
			Bernoulli vint2_selector_cases_1_B = Bernoulli.Uniform();
			// Message to 'vint2_selector_cases_1' from Replicate factor
			vint2_selector_cases_1_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vint2_selector_cases_1_uses_B, vint2_selector_cases_1_B);
			// Message to 'vint2_selector_cases' from Copy factor
			vint2_selector_cases_B[1] = ArrayHelper.SetTo<Bernoulli>(vint2_selector_cases_B[1], vint2_selector_cases_1_B);
			Bernoulli[] vint2_selector_cases_2_uses_B = default(Bernoulli[]);
			// Create array for 'vint2_selector_cases_2_uses' Backwards messages.
			vint2_selector_cases_2_uses_B = new Bernoulli[6];
			for(int _ind = 0; _ind<6; _ind++) {
				vint2_selector_cases_2_uses_B[_ind] = Bernoulli.Uniform();
			}
			// Message to 'vint2_selector_cases_2_uses' from Equal factor
			vint2_selector_cases_2_uses_B[2] = Bernoulli.FromLogOdds(ConstrainEqualOp<int>.LogEvidenceRatio<Discrete>(vDiscrete2, 1));
			// Message to 'vint2_selector_cases_2_uses' from Equal factor
			vint2_selector_cases_2_uses_B[5] = Bernoulli.FromLogOdds(ConstrainEqualOp<int>.LogEvidenceRatio<Discrete>(vDiscrete2, 0));
			Bernoulli vint2_selector_cases_2_B = Bernoulli.Uniform();
			// Message to 'vint2_selector_cases_2' from Replicate factor
			vint2_selector_cases_2_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vint2_selector_cases_2_uses_B, vint2_selector_cases_2_B);
			// Message to 'vint2_selector_cases' from Copy factor
			vint2_selector_cases_B[2] = ArrayHelper.SetTo<Bernoulli>(vint2_selector_cases_B[2], vint2_selector_cases_2_B);
			Bernoulli[] vint2_selector_cases_3_uses_B = default(Bernoulli[]);
			// Create array for 'vint2_selector_cases_3_uses' Backwards messages.
			vint2_selector_cases_3_uses_B = new Bernoulli[6];
			for(int _ind = 0; _ind<6; _ind++) {
				vint2_selector_cases_3_uses_B[_ind] = Bernoulli.Uniform();
			}
			// Message to 'vint2_selector_cases_3_uses' from Equal factor
			vint2_selector_cases_3_uses_B[2] = Bernoulli.FromLogOdds(ConstrainEqualOp<int>.LogEvidenceRatio<Discrete>(vDiscrete2, 1));
			// Message to 'vint2_selector_cases_3_uses' from Equal factor
			vint2_selector_cases_3_uses_B[5] = Bernoulli.FromLogOdds(ConstrainEqualOp<int>.LogEvidenceRatio<Discrete>(vDiscrete2, 1));
			Bernoulli vint2_selector_cases_3_B = Bernoulli.Uniform();
			// Message to 'vint2_selector_cases_3' from Replicate factor
			vint2_selector_cases_3_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vint2_selector_cases_3_uses_B, vint2_selector_cases_3_B);
			// Message to 'vint2_selector_cases' from Copy factor
			vint2_selector_cases_B[3] = ArrayHelper.SetTo<Bernoulli>(vint2_selector_cases_B[3], vint2_selector_cases_3_B);
			// Message to 'vint2_selector_uses' from CasesInt factor
			vint2_selector_uses_B[0] = IntCasesOp.IAverageConditional(vint2_selector_cases_B, vint2_selector_uses_B[0]);
			// Buffer for ReplicateOp_Divide.Marginal<Discrete>
			Discrete vint2_selector_uses_B_toDef = default(Discrete);
			// Message to 'vint2_selector_uses' from Replicate factor
			vint2_selector_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Discrete>(vDiscrete0);
			// Message to 'vint2_selector_uses' from Replicate factor
			vint2_selector_uses_B_toDef = ReplicateOp_Divide.ToDef<Discrete>(vint2_selector_uses_B, vint2_selector_uses_B_toDef);
			// Message to 'vint2_marginal' from Variable factor
			this.vint2_marginal_F = VariableOp.MarginalAverageConditional<Discrete>(vint2_selector_uses_B_toDef, vDiscrete0, this.vint2_marginal_F);
			this.vint4_marginal_F = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message from use of 'vint4'
			Discrete vint4_use_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Buffer for ReplicateOp_Divide.UsesAverageConditional<Discrete>
			Discrete vint2_selector_uses_F_marginal = default(Discrete);
			// Message to 'vint2_selector_uses' from Replicate factor
			vint2_selector_uses_F_marginal = ReplicateOp_Divide.MarginalInit<Discrete>(vDiscrete0);
			// Message to 'vint2_selector_uses' from Replicate factor
			vint2_selector_uses_F_marginal = ReplicateOp_Divide.Marginal<Discrete>(vint2_selector_uses_B_toDef, vDiscrete0, vint2_selector_uses_F_marginal);
			Discrete[] vint2_selector_uses_F = default(Discrete[]);
			// Create array for 'vint2_selector_uses' Forwards messages.
			vint2_selector_uses_F = new Discrete[3];
			for(int _ind = 0; _ind<3; _ind++) {
				vint2_selector_uses_F[_ind] = ArrayHelper.MakeUniform<Discrete>(vDiscrete0);
			}
			// Message to 'vint2_selector_uses' from Replicate factor
			vint2_selector_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(vint2_selector_uses_B[1], vint2_selector_uses_F_marginal, 1, vint2_selector_uses_F[1]);
			Discrete vint4_cond_vint2_0_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint4_cond_vint2_0' from Equal factor
			vint4_cond_vint2_0_B = ConstrainEqualOp<int>.AAverageConditional<Discrete>(0, vint4_cond_vint2_0_B);
			DistributionRefArray<Discrete,int> vint4_cond_vint2_B = default(DistributionRefArray<Discrete,int>);
			// Create array for 'vint4_cond_vint2' Backwards messages.
			vint4_cond_vint2_B = new DistributionRefArray<Discrete,int>(4);
			for(int _gateind = 0; _gateind<4; _gateind++) {
				vint4_cond_vint2_B[_gateind] = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			}
			// Message to 'vint4_cond_vint2' from Copy factor
			vint4_cond_vint2_B[0] = ArrayHelper.SetTo<Discrete>(vint4_cond_vint2_B[0], vint4_cond_vint2_0_B);
			Discrete vint4_cond_vint2_1_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint4_cond_vint2_1' from Equal factor
			vint4_cond_vint2_1_B = ConstrainEqualOp<int>.AAverageConditional<Discrete>(0, vint4_cond_vint2_1_B);
			// Message to 'vint4_cond_vint2' from Copy factor
			vint4_cond_vint2_B[1] = ArrayHelper.SetTo<Discrete>(vint4_cond_vint2_B[1], vint4_cond_vint2_1_B);
			Discrete vint4_cond_vint2_2_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint4_cond_vint2_2' from Equal factor
			vint4_cond_vint2_2_B = ConstrainEqualOp<int>.AAverageConditional<Discrete>(1, vint4_cond_vint2_2_B);
			// Message to 'vint4_cond_vint2' from Copy factor
			vint4_cond_vint2_B[2] = ArrayHelper.SetTo<Discrete>(vint4_cond_vint2_B[2], vint4_cond_vint2_2_B);
			Discrete vint4_cond_vint2_3_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint4_cond_vint2_3' from Equal factor
			vint4_cond_vint2_3_B = ConstrainEqualOp<int>.AAverageConditional<Discrete>(1, vint4_cond_vint2_3_B);
			// Message to 'vint4_cond_vint2' from Copy factor
			vint4_cond_vint2_B[3] = ArrayHelper.SetTo<Discrete>(vint4_cond_vint2_B[3], vint4_cond_vint2_3_B);
			// Message to 'vint4_use' from EnterPartial factor
			vint4_use_B = GateEnterPartialOp<int>.ValueAverageConditional<Discrete>(vint4_cond_vint2_B, vint2_selector_uses_F[1], vDiscrete2, new int[4] {0,1,2,3}, vint4_use_B);
			// Message to 'vint4_marginal' from Variable factor
			this.vint4_marginal_F = VariableOp.MarginalAverageConditional<Discrete>(vint4_use_B, vDiscrete2, this.vint4_marginal_F);
			this.vint5_marginal_F = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message from use of 'vint5'
			Discrete vint5_use_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint2_selector_uses' from Replicate factor
			vint2_selector_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(vint2_selector_uses_B[2], vint2_selector_uses_F_marginal, 2, vint2_selector_uses_F[2]);
			Discrete vint5_cond_vint2_0_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint5_cond_vint2_0' from Equal factor
			vint5_cond_vint2_0_B = ConstrainEqualOp<int>.AAverageConditional<Discrete>(0, vint5_cond_vint2_0_B);
			DistributionRefArray<Discrete,int> vint5_cond_vint2_B = default(DistributionRefArray<Discrete,int>);
			// Create array for 'vint5_cond_vint2' Backwards messages.
			vint5_cond_vint2_B = new DistributionRefArray<Discrete,int>(4);
			for(int _gateind2 = 0; _gateind2<4; _gateind2++) {
				vint5_cond_vint2_B[_gateind2] = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			}
			// Message to 'vint5_cond_vint2' from Copy factor
			vint5_cond_vint2_B[0] = ArrayHelper.SetTo<Discrete>(vint5_cond_vint2_B[0], vint5_cond_vint2_0_B);
			Discrete vint5_cond_vint2_1_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint5_cond_vint2_1' from Equal factor
			vint5_cond_vint2_1_B = ConstrainEqualOp<int>.AAverageConditional<Discrete>(1, vint5_cond_vint2_1_B);
			// Message to 'vint5_cond_vint2' from Copy factor
			vint5_cond_vint2_B[1] = ArrayHelper.SetTo<Discrete>(vint5_cond_vint2_B[1], vint5_cond_vint2_1_B);
			Discrete vint5_cond_vint2_2_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint5_cond_vint2_2' from Equal factor
			vint5_cond_vint2_2_B = ConstrainEqualOp<int>.AAverageConditional<Discrete>(0, vint5_cond_vint2_2_B);
			// Message to 'vint5_cond_vint2' from Copy factor
			vint5_cond_vint2_B[2] = ArrayHelper.SetTo<Discrete>(vint5_cond_vint2_B[2], vint5_cond_vint2_2_B);
			Discrete vint5_cond_vint2_3_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete2);
			// Message to 'vint5_cond_vint2_3' from Equal factor
			vint5_cond_vint2_3_B = ConstrainEqualOp<int>.AAverageConditional<Discrete>(1, vint5_cond_vint2_3_B);
			// Message to 'vint5_cond_vint2' from Copy factor
			vint5_cond_vint2_B[3] = ArrayHelper.SetTo<Discrete>(vint5_cond_vint2_B[3], vint5_cond_vint2_3_B);
			// Message to 'vint5_use' from EnterPartial factor
			vint5_use_B = GateEnterPartialOp<int>.ValueAverageConditional<Discrete>(vint5_cond_vint2_B, vint2_selector_uses_F[2], vDiscrete2, new int[4] {0,1,2,3}, vint5_use_B);
			// Message to 'vint5_marginal' from Variable factor
			this.vint5_marginal_F = VariableOp.MarginalAverageConditional<Discrete>(vint5_use_B, vDiscrete2, this.vint5_marginal_F);
			this.Constant_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Discrete Vint2Marginal()
		{
			return this.vint2_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Discrete Vint4Marginal()
		{
			return this.vint4_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint5' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Discrete Vint5Marginal()
		{
			return this.vint5_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
