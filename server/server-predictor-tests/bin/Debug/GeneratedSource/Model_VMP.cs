using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Maths;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference
	/// </summary>
	/// <remarks>
	/// The easiest way to use this class is to wrap an instance in a CompiledAlgorithm object and use
	/// the methods on CompiledAlgorithm to set parameters and execute inference.
	/// 
	/// If you instead wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class
	/// 2) Set the value of any externally-set fields e.g. data, priors
	/// 3) Call the Execute(numberOfIterations) method
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.5 at 09:31 on 17 maja 2013.
	/// </remarks>
	public partial class Model_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>Message to marginal of 'vint2'</summary>
		public Discrete vint2_marginal_F;
		/// <summary>Message to marginal of 'vint3'</summary>
		public Discrete vint3_marginal_F;
		/// <summary>Message to marginal of 'vint4'</summary>
		public Discrete vint4_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{			get {
				return this.numberOfIterationsDone;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>The marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object Marginal(string variableName)
		{
			if (variableName=="vint2") {
				return this.Vint2Marginal();
			}
			if (variableName=="vint3") {
				return this.Vint3Marginal();
			}
			if (variableName=="vint4") {
				return this.Vint4Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>The query-specific marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.numberOfIterationsDone = numberOfIterations;
		}

		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		public void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			// The constant 'vDiscrete0'
			Discrete vDiscrete0 = new Discrete(DenseVector.FromArray(new double[4] {0.4,0.4,0.1,0.1}));
			this.vint2_marginal_F = ArrayHelper.MakeUniform<Discrete>(vDiscrete0);
			Discrete vint2_selector_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete0);
			// Message to 'vint2_marginal' from Variable factor
			this.vint2_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Discrete>(vint2_selector_B, vDiscrete0, this.vint2_marginal_F);
			// The constant 'vDiscrete1'
			Discrete vDiscrete1 = new Discrete(DenseVector.FromArray(new double[2] {0.1,0.9}));
			this.vint3_marginal_F = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message from use of 'vint3'
			Discrete vint3_use_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			Discrete vint3_cond_vint2_0_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message to 'vint3_cond_vint2_0' from Equal factor
			vint3_cond_vint2_0_B = ConstrainEqualOp<int>.AAverageLogarithm<Discrete>(0, vint3_cond_vint2_0_B);
			DistributionRefArray<Discrete,int> vint3_cond_vint2_B = default(DistributionRefArray<Discrete,int>);
			// Create array for 'vint3_cond_vint2' Backwards messages.
			vint3_cond_vint2_B = new DistributionRefArray<Discrete,int>(4);
			for(int _gateind = 0; _gateind<4; _gateind++) {
				vint3_cond_vint2_B[_gateind] = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			}
			// Message to 'vint3_cond_vint2' from Copy factor
			vint3_cond_vint2_B[0] = ArrayHelper.SetTo<Discrete>(vint3_cond_vint2_B[0], vint3_cond_vint2_0_B);
			Discrete vint3_cond_vint2_1_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message to 'vint3_cond_vint2_1' from Equal factor
			vint3_cond_vint2_1_B = ConstrainEqualOp<int>.AAverageLogarithm<Discrete>(0, vint3_cond_vint2_1_B);
			// Message to 'vint3_cond_vint2' from Copy factor
			vint3_cond_vint2_B[1] = ArrayHelper.SetTo<Discrete>(vint3_cond_vint2_B[1], vint3_cond_vint2_1_B);
			Discrete vint3_cond_vint2_2_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message to 'vint3_cond_vint2_2' from Equal factor
			vint3_cond_vint2_2_B = ConstrainEqualOp<int>.AAverageLogarithm<Discrete>(1, vint3_cond_vint2_2_B);
			// Message to 'vint3_cond_vint2' from Copy factor
			vint3_cond_vint2_B[2] = ArrayHelper.SetTo<Discrete>(vint3_cond_vint2_B[2], vint3_cond_vint2_2_B);
			Discrete vint3_cond_vint2_3_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message to 'vint3_cond_vint2_3' from Equal factor
			vint3_cond_vint2_3_B = ConstrainEqualOp<int>.AAverageLogarithm<Discrete>(1, vint3_cond_vint2_3_B);
			// Message to 'vint3_cond_vint2' from Copy factor
			vint3_cond_vint2_B[3] = ArrayHelper.SetTo<Discrete>(vint3_cond_vint2_B[3], vint3_cond_vint2_3_B);
			// Message to 'vint3_use' from EnterPartial factor
			vint3_use_B = GateEnterPartialOp<int>.ValueAverageLogarithm<Discrete>(vint3_cond_vint2_B, this.vint2_marginal_F, new int[4] {0,1,2,3}, vint3_use_B);
			// Message to 'vint3_marginal' from Variable factor
			this.vint3_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Discrete>(vint3_use_B, vDiscrete1, this.vint3_marginal_F);
			this.vint4_marginal_F = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message from use of 'vint4'
			Discrete vint4_use_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			Discrete vint4_cond_vint2_0_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message to 'vint4_cond_vint2_0' from Equal factor
			vint4_cond_vint2_0_B = ConstrainEqualOp<int>.AAverageLogarithm<Discrete>(0, vint4_cond_vint2_0_B);
			DistributionRefArray<Discrete,int> vint4_cond_vint2_B = default(DistributionRefArray<Discrete,int>);
			// Create array for 'vint4_cond_vint2' Backwards messages.
			vint4_cond_vint2_B = new DistributionRefArray<Discrete,int>(4);
			for(int _gateind2 = 0; _gateind2<4; _gateind2++) {
				vint4_cond_vint2_B[_gateind2] = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			}
			// Message to 'vint4_cond_vint2' from Copy factor
			vint4_cond_vint2_B[0] = ArrayHelper.SetTo<Discrete>(vint4_cond_vint2_B[0], vint4_cond_vint2_0_B);
			Discrete vint4_cond_vint2_1_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message to 'vint4_cond_vint2_1' from Equal factor
			vint4_cond_vint2_1_B = ConstrainEqualOp<int>.AAverageLogarithm<Discrete>(1, vint4_cond_vint2_1_B);
			// Message to 'vint4_cond_vint2' from Copy factor
			vint4_cond_vint2_B[1] = ArrayHelper.SetTo<Discrete>(vint4_cond_vint2_B[1], vint4_cond_vint2_1_B);
			Discrete vint4_cond_vint2_2_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message to 'vint4_cond_vint2_2' from Equal factor
			vint4_cond_vint2_2_B = ConstrainEqualOp<int>.AAverageLogarithm<Discrete>(0, vint4_cond_vint2_2_B);
			// Message to 'vint4_cond_vint2' from Copy factor
			vint4_cond_vint2_B[2] = ArrayHelper.SetTo<Discrete>(vint4_cond_vint2_B[2], vint4_cond_vint2_2_B);
			Discrete vint4_cond_vint2_3_B = ArrayHelper.MakeUniform<Discrete>(vDiscrete1);
			// Message to 'vint4_cond_vint2_3' from Equal factor
			vint4_cond_vint2_3_B = ConstrainEqualOp<int>.AAverageLogarithm<Discrete>(1, vint4_cond_vint2_3_B);
			// Message to 'vint4_cond_vint2' from Copy factor
			vint4_cond_vint2_B[3] = ArrayHelper.SetTo<Discrete>(vint4_cond_vint2_B[3], vint4_cond_vint2_3_B);
			// Message to 'vint4_use' from EnterPartial factor
			vint4_use_B = GateEnterPartialOp<int>.ValueAverageLogarithm<Discrete>(vint4_cond_vint2_B, this.vint2_marginal_F, new int[4] {0,1,2,3}, vint4_use_B);
			// Message to 'vint4_marginal' from Variable factor
			this.vint4_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Discrete>(vint4_use_B, vDiscrete1, this.vint4_marginal_F);
			this.Constant_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Discrete Vint2Marginal()
		{
			return this.vint2_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Discrete Vint3Marginal()
		{
			return this.vint3_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Discrete Vint4Marginal()
		{
			return this.vint4_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
